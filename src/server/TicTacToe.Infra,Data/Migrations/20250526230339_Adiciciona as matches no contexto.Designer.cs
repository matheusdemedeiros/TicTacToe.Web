// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicTacToe.Infra.Data.Contexts;

#nullable disable

namespace TicTacToe.Infra.Data.Migrations
{
    [DbContext(typeof(TicDbContext))]
    [Migration("20250526230339_Adiciciona as matches no contexto")]
    partial class Adicicionaasmatchesnocontexto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicMatchPlayers", b =>
                {
                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TicMatchPlayers", (string)null);
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.MatchModule.TicMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PlayMode")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("TicScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TicMatches", (string)null);
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.MatchModule.TicPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TicPlayers", (string)null);
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.MatchModule.TicScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TicPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Tie")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WinningSymbol")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("TicPlayerId");

                    b.ToTable("TicScores", (string)null);
                });

            modelBuilder.Entity("TicMatchPlayers", b =>
                {
                    b.HasOne("TicTacToe.Domain.Entities.MatchModule.TicMatch", null)
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToe.Domain.Entities.MatchModule.TicPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.MatchModule.TicMatch", b =>
                {
                    b.OwnsOne("TicTacToe.Domain.Entities.MatchModule.TicBoard", "Board", b1 =>
                        {
                            b1.Property<Guid>("TicMatchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("WinningSimbol")
                                .IsRequired()
                                .HasMaxLength(1)
                                .HasColumnType("nvarchar(1)")
                                .HasColumnName("WinningSimbol");

                            b1.HasKey("TicMatchId");

                            b1.ToTable("TicMatches");

                            b1.ToJson("Board");

                            b1.WithOwner()
                                .HasForeignKey("TicMatchId");
                        });

                    b.Navigation("Board")
                        .IsRequired();
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.MatchModule.TicScore", b =>
                {
                    b.HasOne("TicTacToe.Domain.Entities.MatchModule.TicMatch", "Match")
                        .WithOne("TicScore")
                        .HasForeignKey("TicTacToe.Domain.Entities.MatchModule.TicScore", "MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TicTacToe.Domain.Entities.MatchModule.TicPlayer", "WinningPlayer")
                        .WithMany()
                        .HasForeignKey("TicPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("WinningPlayer");
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.MatchModule.TicMatch", b =>
                {
                    b.Navigation("TicScore")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
